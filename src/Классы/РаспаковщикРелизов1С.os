// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/yard/
// ----------------------------------------------------------

Перем МенеджерОбработкиДанных;         // Объект            - обработчик-менеджер, вызвавшая данный обработчик
Перем Идентификатор;                   // Строка            - идентификатор обработчика,
                                       //                     заданный обработкой-менеджером
Перем ПараметрыОбработки;              // Структура         - параметры обработки
Перем Лог;                             // Объект            - объект записи лога приложения

Перем Приложение_Имя;                  // Строка            - имя приложения
Перем Приложение_Ид;                   // Строка            - идентификатор приложения
Перем Приложение_Версия;               // Строка            - версия приложения

Перем ПутьКДистрибутиву;               // Строка            - путь к дистрибутиву конфигурации 1С
Перем КаталогДляРаспаковкиEFD;         // Строка            - каталог для распаковки шаблона конфигурации
Перем КаталогВАрхивеДляРаспаковкиEFD;  // Строка            - регулярное выражение, отбора каталогов
                                       //                     в архиве EFD для распаковки
Перем ФайлыДляРаспаковкиEFD;           // Массив(Строка)    - список файлов для распаковки из архива
                                       //                     EFD дистрибутива конфигурации, если не указан,
                                       //                     то распаковываются все файлы
Перем РаспаковыватьСуществующие;       // Булево            - Истина - будут распакованы все найденные дистрибутивы
                                       //                     независимо от существующих в каталоге для распаковки
                                       //                     Ложь - будут оаспакованы только отсутствующие
                                       //                     в каталоге для распаковки дистрибутивы
                                       //                     (проверяются файлы description.json)
Перем РазделительВерсии;               // Строка            - символ-разделитель частей версии дистрибутива
                                       //                     в имени каталога распаковки шаблона

Перем НакопленныеДанные;        // Массив(Структура)      - результаты обработки данных

#Область ПрограммныйИнтерфейс

// Функция - признак возможности обработки, принимать входящие данные
// 
// Возвращаемое значение:
//	Булево - Истина - обработка может принимать входящие данные для обработки;
//	         Ложь - обработка не принимает входящие данные;
//
Функция ПринимаетДанные() Экспорт
	
	Возврат Ложь;
	
КонецФункции // ПринимаетДанные()

// Функция - признак возможности обработки, возвращать обработанные данные
// 
// Возвращаемое значение:
//	Булево - Истина - обработка может возвращать обработанные данные;
//	         Ложь - обработка не возвращает данные;
//
Функция ВозвращаетДанные() Экспорт
	
	Возврат Истина;
	
КонецФункции // ВозвращаетДанные()

// Функция - возвращает список параметров обработки
// 
// Возвращаемое значение:
//	Структура                                - структура входящих параметров обработки
//      *Тип                    - Строка         - тип параметра
//      *Обязательный           - Булево         - Истина - параметр обязателен
//      *ЗначениеПоУмолчанию    - Произвольный   - значение параметра по умолчанию
//      *Описание               - Строка         - описание параметра
//
Функция ОписаниеПараметров() Экспорт
	
	Параметры = Новый Структура();
	
	ДобавитьОписаниеПараметра(Параметры,
	                          "Приложение_Имя",
	                          "Строка",
	                          Ложь,
	                          "",
	                          "имя конфигурации 1С");

	ДобавитьОписаниеПараметра(Параметры,
	                          "Приложение_Ид",
	                          "Строка",
	                          Ложь,
	                          "",
	                          "идентификатор конфигурации 1С");

	ДобавитьОписаниеПараметра(Параметры,
	                          "Приложение_Версия",
	                          "Строка",
	                          Ложь,
	                          "",
	                          "версия конфигурации 1С");

	ДобавитьОписаниеПараметра(Параметры,
	                          "ПутьКДистрибутиву",
	                          "Строка",
	                          Истина,
	                          "",
	                          "путь к дистрибутиву конфигурации 1С");

	ДобавитьОписаниеПараметра(Параметры,
	                          "КаталогДляРаспаковкиEFD",
	                          "Строка",
	                          Истина,
	                          "",
	                          "каталог для распаковки шаблона конфигурации");
	
	ДобавитьОписаниеПараметра(Параметры,
	                          "КаталогВАрхивеДляРаспаковкиEFD",
	                          "Строка",
	                          Ложь,
	                          "",
	                          "регулярное выражение, отбора каталогов
	                          |в архиве EFD для распаковки");

	ДобавитьОписаниеПараметра(Параметры,
	                          "ФайлыДляРаспаковкиEFD",
	                          "Массив",
	                          Ложь,
	                          "",
	                          "список файлов для распаковки из архива EFD дистрибутива конфигурации,
	                          |если не указан, то распаковываются все файлы");

	ДобавитьОписаниеПараметра(Параметры,
	                          "РаспаковыватьСуществующие",
	                          "Булево",
	                          Ложь,
	                          Ложь,
	                          "Истина - будут распакованы все найденные дистрибутивы
	                          |независимо от существующих в каталоге для распаковки
	                          |Ложь - будут оаспакованы только отсутствующие
	                          |в каталоге для распаковки дистрибутивы
	                          |(проверяются файлы description.json)");

	ДобавитьОписаниеПараметра(Параметры,
	                          "РазделительВерсии",
	                          "Строка",
	                          Ложь,
	                          ".",
	                          "символ-разделитель частей версии дистрибутива
	                          |в имени каталога распаковки шаблона");

	Возврат Параметры;
	
КонецФункции // ОписаниеПараметров()

// Функция - Возвращает обработку - менеджер
// 
// Возвращаемое значение:
//	ВнешняяОбработкаОбъект - обработка-менеджер
//
Функция МенеджерОбработкиДанных() Экспорт
	
	Возврат МенеджерОбработкиДанных;
	
КонецФункции // МенеджерОбработкиДанных()

// Процедура - Устанавливает обработку - менеджер
//
// Параметры:
//	НовыйМенеджерОбработкиДанных      - ВнешняяОбработкаОбъект - обработка-менеджер
//
Процедура УстановитьМенеджерОбработкиДанных(Знач НовыйМенеджерОбработкиДанных) Экспорт
	
	МенеджерОбработкиДанных = НовыйМенеджерОбработкиДанных;
	
КонецПроцедуры // УстановитьМенеджерОбработкиДанных()

// Функция - Возвращает идентификатор обработчика
// 
// Возвращаемое значение:
//	Строка - идентификатор обработчика
//
Функция Идентификатор() Экспорт
	
	Возврат Идентификатор;
	
КонецФункции // Идентификатор()

// Процедура - Устанавливает идентификатор обработчика
//
// Параметры:
//	НовыйИдентификатор      - Строка - новый идентификатор обработчика
//
Процедура УстановитьИдентификатор(Знач НовыйИдентификатор) Экспорт
	
	Идентификатор = НовыйИдентификатор;
	
КонецПроцедуры // УстановитьИдентификатор()

// Функция - Возвращает значения параметров обработки
// 
// Возвращаемое значение:
//	Структура - параметры обработки
//
Функция ПараметрыОбработкиДанных() Экспорт
	
	Возврат ПараметрыОбработки;
	
КонецФункции // ПараметрыОбработкиДанных()

// Процедура - Устанавливает значения параметров обработки данных
//
// Параметры:
//	НовыеПараметры      - Структура     - значения параметров обработки
//
Процедура УстановитьПараметрыОбработкиДанных(Знач НовыеПараметры) Экспорт
	
	ПараметрыОбработки = НовыеПараметры;
	
	УстановитьПараметрОбработкиДанныхИзСтруктуры("Приложение_Имя"                 , ПараметрыОбработки, "НеизвестнаяКонфигурация");
	УстановитьПараметрОбработкиДанныхИзСтруктуры("Приложение_Ид"                  , ПараметрыОбработки, "unknown");
	УстановитьПараметрОбработкиДанныхИзСтруктуры("Приложение_Версия"              , ПараметрыОбработки, "0.0.0.0");
	УстановитьПараметрОбработкиДанныхИзСтруктуры("ПутьКДистрибутиву"              , ПараметрыОбработки);
	УстановитьПараметрОбработкиДанныхИзСтруктуры("КаталогДляРаспаковкиEFD"        , ПараметрыОбработки);
	УстановитьПараметрОбработкиДанныхИзСтруктуры("РаспаковкаКаталогов"            , ПараметрыОбработки);
	УстановитьПараметрОбработкиДанныхИзСтруктуры("КаталогВАрхивеДляРаспаковкиEFD" , ПараметрыОбработки);
	УстановитьПараметрОбработкиДанныхИзСтруктуры("ФайлыДляРаспаковкиEFD"          , ПараметрыОбработки);
	УстановитьПараметрОбработкиДанныхИзСтруктуры("РаспаковыватьСуществующие"      , ПараметрыОбработки);
	УстановитьПараметрОбработкиДанныхИзСтруктуры("РазделительВерсии"              , ПараметрыОбработки);

КонецПроцедуры // УстановитьПараметрыОбработкиДанных()

// Функция - Возвращает значение параметра обработки данных
// 
// Параметры:
//	ИмяПараметра      - Строка           - имя получаемого параметра
//
// Возвращаемое значение:
//	Произвольный      - значение параметра
//
Функция ПараметрОбработкиДанных(Знач ИмяПараметра) Экспорт
	
	Если НЕ ТипЗнч(ПараметрыОбработки) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПараметрыОбработки.Свойство(ИмяПараметра) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыОбработки[ИмяПараметра];
	
КонецФункции // ПараметрОбработкиДанных()

// Процедура - Устанавливает значение параметра обработки
//
// Параметры:
//	ИмяПараметра      - Строка           - имя устанавливаемого параметра
//	Значение          - Произвольный     - новое значение параметра
//
Процедура УстановитьПараметрОбработкиДанных(Знач ИмяПараметра, Знач Значение) Экспорт
	
	Если НЕ ТипЗнч(ПараметрыОбработки) = Тип("Структура") Тогда
		ПараметрыОбработки = Новый Структура();
	КонецЕсли;
	
	ПараметрыОбработки.Вставить(ИмяПараметра, Значение);

	Если НЕ ЕстьПеременнаяМодуля(ИмяПараметра) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВРег(ИмяПараметра) = "ФАЙЛЫДЛЯРАСПАКОВКИEFD" Тогда
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			ФайлыДляРаспаковкиEFD = Значение;
		Иначе
			ФайлыДляРаспаковкиEFD = СтрРазделить(Значение, "|", Ложь);
		КонецЕсли;
	ИначеЕсли ВРег(ИмяПараметра) = "ПУТЬКДИСТРИБУТИВУ" Тогда
		ВремФайл = Новый Файл(Значение);
		ПутьКДистрибутиву = ВремФайл.ПолноеИмя;
	ИначеЕсли ВРег(ИмяПараметра) = "КАТАЛОГДЛЯРАСПАКОВКИEFD" Тогда
		ВремФайл = Новый Файл(Значение);
		КаталогДляРаспаковкиEFD = ВремФайл.ПолноеИмя;
	Иначе
		Выполнить(СтрШаблон("%1 = Значение;", ИмяПараметра));
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрОбработкиДанных()

// Процедура - устанавливает данные для обработки
//
// Параметры:
//	ВходящиеДанные      - Структура     - значения параметров обработки
//
Процедура УстановитьДанные(Знач ВходящиеДанные) Экспорт
	
КонецПроцедуры // УстановитьДанные()

// Процедура - выполняет обработку данных
//
Процедура ОбработатьДанные() Экспорт

	ФайлАрхиваEFD = Новый Файл(ОбъединитьПути(ПутьКДистрибутиву, "1cv8.efd"));
	
	Если НЕ ФайлАрхиваEFD.Существует() Тогда
		ВызватьИсключение СтрШаблон("Не найден файл дистрибутива конфигурации ""%1""", ФайлАрхиваEFD.ПолноеИмя);
	КонецЕсли;
	
	ПутьКФайлуОписанияДистрибутива = ОбъединитьПути(ПутьКДистрибутиву, "description.json");
	ФайлОписанияДистрибутива = Новый Файл(ПутьКФайлуОписанияДистрибутива);
	ОписаниеДистрибутива = Новый Структура("Идентификатор, Имя, Версия, Дата");
	Если ФайлОписанияДистрибутива.Существует() Тогда
		ОписаниеДистрибутива = Служебный.ОписаниеРелиза(ФайлОписанияДистрибутива.ПолноеИмя);
		Приложение_Ид     = ОписаниеДистрибутива.Идентификатор;
		Приложение_Имя    = ОписаниеДистрибутива.Имя;
		Приложение_Версия = ОписаниеДистрибутива.Версия;
	Иначе
		ПрочитатьОписаниеШаблонаИзМанифеста(ФайлАрхиваEFD);
	КонецЕсли;

	КаталогВерсии = Приложение_Версия;
	Если ЗначениеЗаполнено(РазделительВерсии) Тогда
		КаталогВерсии = СтрЗаменить(КаталогВерсии, ".", РазделительВерсии);
	КонецЕсли;
	КаталогДляРаспаковки = ОбъединитьПути(КаталогДляРаспаковкиEFD, Приложение_Ид, КаталогВерсии);

	Распаковщик.ОбеспечитьКаталог(КаталогДляРаспаковки);

	ПутьКФайлуОписанияШаблона = ОбъединитьПути(КаталогДляРаспаковки, "description.json");
	ФайлОписанияШаблона = Новый Файл(ПутьКФайлуОписанияШаблона);
	ОписаниеШаблона = Новый Структура("Имя, Версия, Дата");
	Если ФайлОписанияШаблона.Существует() Тогда
		ОписаниеШаблона = Служебный.ОписаниеРелиза(ФайлОписанияШаблона.ПолноеИмя);
	КонецЕсли;

	Если НЕ РаспаковыватьСуществующие
	   И ОписаниеШаблона.Имя = ОписаниеДистрибутива.Имя
	   И ОписаниеШаблона.Версия = ОписаниеДистрибутива.Версия Тогда
		Лог.Информация("[%1]: Шаблон ""%2"", версии ""%3"" распакован ранее.",
		               СокрЛП(ЭтотОбъект),
		               ОписаниеШаблона.Имя,
		               ОписаниеШаблона.Версия);
	 Иначе
		Лог.Информация("[%1]: Начало распаковки архива EFD ""%2"" конфигурации ""%3"", версия ""%4"" в каталог ""%5"".",
		               ЭтотОбъект,
		               ФайлАрхиваEFD.ПолноеИмя,
		               Приложение_Имя,
		               Приложение_Версия,
		               КаталогДляРаспаковкиEFD);
	
		Распаковщик.РаспаковатьШаблонКонфигурации1С(ФайлАрхиваEFD.ПолноеИмя,
		                                            КаталогДляРаспаковки,
		                                            КаталогВАрхивеДляРаспаковкиEFD,
		                                            ФайлыДляРаспаковкиEFD,
		                                            Перечисления.ВариантыРаспаковкиКаталогов.БезОбщихКаталогов);

		Если ФайлОписанияДистрибутива.Существует() Тогда
			КопироватьФайл(ПутьКФайлуОписанияДистрибутива, ПутьКФайлуОписанияШаблона);
		КонецЕсли;

		Лог.Информация("[%1]: Распакован файл архива EFD ""%2""", СокрЛП(ЭтотОбъект), ФайлАрхиваEFD.ПолноеИмя);
	КонецЕсли;

	ПродолжениеОбработкиДанныхВызовМенеджера(КаталогДляРаспаковки);

	ЗавершениеОбработкиДанныхВызовМенеджера();

КонецПроцедуры // ОбработатьДанные()

Функция РезультатОбработки() Экспорт
	
	Возврат НакопленныеДанные;
	
КонецФункции // РезультатОбработки()

// Процедура - выполняет действия при окончании обработки данных
// и оповещает обработку-менеджер о завершении обработки данных
//
Процедура ЗавершениеОбработкиДанных() Экспорт
	
	Лог.Информация("[%1]: Завершение обработки данных.", ТипЗнч(ЭтотОбъект));

	ЗавершениеОбработкиДанныхВызовМенеджера();
	
КонецПроцедуры // ЗавершениеОбработкиДанных()

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

// Функция - возвращает объект управления логированием
//
// Возвращаемое значение:
//  Объект      - объект управления логированием
//
Функция Лог() Экспорт
	
	Возврат Лог;

КонецФункции // Лог()

// Процедура - устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект описание команды
//
Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Опция("p path", "", "путь к дистрибутиву конфигурации 1С")
	       .ТСтрока()
	       .ВОкружении("YARD_DISTRIB_PATH");

	Команда.Опция("ep extract-path", "", "каталог для распаковки шаблонов конфигураци")
	       .ТСтрока()
	       .ВОкружении("YARD_EXTRACT_PATH");

	Команда.Опция("ed extract-dir", "", "регулярное выражение, отбора каталогов
	                                    |в архиве EFD для распаковки")
	       .ТСтрока()
	       .ВОкружении("YARD_EXTRACT_DIR");

	Команда.Опция("ef extract-files", "", "список файлов для распаковки из архива дистрибутива, разделенный ""|"",
	                                      |если не указан, то распаковываются все файлы")
	       .ТСтрока()
	       .ВОкружении("YARD_EXTRACT_FILES");

	Команда.Опция("ee extract-existing", Ложь, "Истина - будут распакованы все найденные дистрибутивы
	                                           |независимо от существующих в каталоге для распаковки
	                                           |Ложь - будут оаспакованы только отсутствующие
	                                           |в каталоге для распаковки дистрибутивы
	                                           |(проверяются файлы description.json)")
	       .Флаг();

	Команда.Опция("vd version-delimiter", ".", "символ-разделитель частей версии дистрибутива
                                               | в имени каталога распаковки шаблона")
	       .ТСтрока();

	Команда.Опция("n app-name", "", "имя конфигурации 1С")
	       .ТСтрока()
	       .ВОкружении("YARD_EXTRACT_CONF_NAME");

	Команда.Опция("i app-id", "", "идентификатор конфигурации 1С")
	       .ТСтрока()
	       .ВОкружении("YARD_EXTRACT_CONF_ID");

	Команда.Опция("v app-version", "", "версия конфигурации 1С")
	       .ТСтрока()
	       .ВОкружении("YARD_EXTRACT_CONF_VERSION");

КонецПроцедуры // ОписаниеКоманды()

// Процедура - запускает выполнение команды устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект  описание команды
//
Процедура ВыполнитьКоманду(Знач Команда) Экспорт

	ВыводОтладочнойИнформации = Команда.ЗначениеОпции("verbose");

	ПараметрыПриложения.УстановитьРежимОтладки(ВыводОтладочнойИнформации);

	УстановитьПараметрОбработкиДанных("Приложение_Имя"                 , Команда.ЗначениеОпции("app-name"));
	УстановитьПараметрОбработкиДанных("Приложение_Ид"                  , Команда.ЗначениеОпции("app-id"));
	УстановитьПараметрОбработкиДанных("Приложение_Версия"              , Команда.ЗначениеОпции("app-version"));

	УстановитьПараметрОбработкиДанных("ПутьКДистрибутиву"              , Команда.ЗначениеОпции("path"));
	УстановитьПараметрОбработкиДанных("КаталогДляРаспаковкиEFD"        , Команда.ЗначениеОпции("extract-path"));
	УстановитьПараметрОбработкиДанных("КаталогВАрхивеДляРаспаковкиEFD" , Команда.ЗначениеОпции("extract-dir"));
	
	ВремФайлы = СтрРазделить(Команда.ЗначениеОпции("extract-files"), "|", Ложь);
	УстановитьПараметрОбработкиДанных("ФайлыДляРаспаковкиEFD"     , ВремФайлы);
	УстановитьПараметрОбработкиДанных("РаспаковыватьСуществующие" , Команда.ЗначениеОпции("extract-existing"));
	УстановитьПараметрОбработкиДанных("РазделительВерсии"         , Команда.ЗначениеОпции("version-delimiter"));

	ОбработатьДанные();

КонецПроцедуры // ВыполнитьКоманду()

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыВызоваМенеджераОбработкиДанных

// Процедура - выполняет действия обработки элемента данных
// и оповещает обработку-менеджер о продолжении обработки элемента
//
//	Параметры:
//		Элемент    - Произвольный     - Элемент данных для продолжения обработки
//
Процедура ПродолжениеОбработкиДанныхВызовМенеджера(Элемент)
	
	Если МенеджерОбработкиДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбработкиДанных.ПродолжениеОбработкиДанных(Элемент, Идентификатор);
	
КонецПроцедуры // ПродолжениеОбработкиДанныхВызовМенеджера()

// Процедура - выполняет действия при окончании обработки данных
// и оповещает обработку-менеджер о завершении обработки данных
//
Процедура ЗавершениеОбработкиДанныхВызовМенеджера()
	
	Если МенеджерОбработкиДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбработкиДанных.ЗавершениеОбработкиДанных(Идентификатор);
	
КонецПроцедуры // ЗавершениеОбработкиДанныхВызовМенеджера()

#КонецОбласти // СлужебныеПроцедурыВызоваМенеджераОбработкиДанных

#Область СлужебныеПроцедурыИФункции

// Процедура - добавляет описание параметра обработки
// 
// Параметры:
//     ОписаниеПараметров     - Структура      - структура описаний параметров
//     Параметр               - Строка         - имя параметра
//     Тип                    - Строка         - список возможных типов параметра
//     Обязательный           - Булево         - Истина - параметр обязателен
//     ЗначениеПоУмолчанию    - Произвольный   - значение параметра по умолчанию
//     Описание               - Строка         - описание параметра
//
Процедура ДобавитьОписаниеПараметра(ОписаниеПараметров
	                              , Параметр
	                              , Тип
	                              , Обязательный = Ложь
	                              , ЗначениеПоУмолчанию = Неопределено
	                              , Описание = "")
	
	Если НЕ ТипЗнч(ОписаниеПараметров) = Тип("Структура") Тогда
		ОписаниеПараметров = Новый Структура();
	КонецЕсли;
	
	ОписаниеПараметра = Новый Структура();
	ОписаниеПараметра.Вставить("Тип"                , Тип);
	ОписаниеПараметра.Вставить("Обязательный"       , Обязательный);
	ОписаниеПараметра.Вставить("ЗначениеПоУмолчанию", ЗначениеПоУмолчанию);
	ОписаниеПараметра.Вставить("Описание"           , Описание);
	
	ОписаниеПараметров.Вставить(Параметр, ОписаниеПараметра);
	
КонецПроцедуры // ДобавитьОписаниеПараметра()

// Процедура - устанавливает значение переменной модуля с указанным именем
// из значения структуры с тем же именем или значение по умолчанию
// 
// Параметры:
//	ИмяПараметра          - Строка           - имя параметра для установки значения
//	СтруктураПараметров   - Структура        - структуры значений параметров
//	ЗначениеПоУмолчанию   - Произвольный     - значение переменной по умолчанию
//
Процедура УстановитьПараметрОбработкиДанныхИзСтруктуры(Знач ИмяПараметра,
	                                                  Знач СтруктураПараметров,
	                                                  Знач ЗначениеПоУмолчанию = "")

	Если НЕ ЕстьПеременнаяМодуля(ИмяПараметра) Тогда
		Возврат;
	КонецЕсли;

	ЗначениеПараметра = ЗначениеПоУмолчанию;

	Если СтруктураПараметров.Свойство(ИмяПараметра) Тогда
		ЗначениеПараметра = СтруктураПараметров[ИмяПараметра];
	КонецЕсли;

	Выполнить(СтрШаблон("%1 = ЗначениеПараметра;", ИмяПараметра));

КонецПроцедуры // УстановитьПараметрОбработкиДанныхИзСтруктуры()

// Функция - проверяет наличие в текущем модуле переменной с указанным именем
// 
// Параметры:
//	ИмяПеременной      - Строка           - имя переменной для проверки
//
// Возвращаемое значение:
//	Булево      - Истина - переменная существует; Ложь - в противном случае.
//
Функция ЕстьПеременнаяМодуля(Знач ИмяПеременной)

	Попытка
		ЗначениеПеременной = Вычислить(ИмяПеременной);
	Исключение
		Возврат Ложь;
	КонецПопытки;

	Возврат Истина;

КонецФункции // ЕстьПеременнаяМодуля()

Процедура ПрочитатьОписаниеШаблонаИзМанифеста(ФайлАрхиваEFD)

	КаталогДляРаспаковки = ПолучитьИмяВременногоФайла();

	Распаковщик.РаспаковатьШаблонКонфигурации1С(ФайлАрхиваEFD.ПолноеИмя,
	                                            КаталогДляРаспаковки,
	                                            КаталогВАрхивеДляРаспаковкиEFD,
	                                            "1cv8.mft",
	                                            Перечисления.ВариантыРаспаковкиКаталогов.БезКаталогов);

	ПутьКМанифесту = ОбъединитьПути(КаталогДляРаспаковки, "1cv8.mft");

	ВремФайл = Новый Файл(ПутьКМанифесту);
	Если НЕ ВремФайл.Существует() Тогда
		Возврат;
	КонецЕсли;

	Чтение = Новый ЧтениеТекста(ПутьКМанифесту);

	ТекСтрока = Чтение.ПрочитатьСтроку();

	Пока ЗначениеЗаполнено(ТекСтрока) Цикл
		
		ДанныеСтроки = СтрРазделить(ТекСтрока, "=");
		
		Если ДанныеСтроки.Количество() < 1 Тогда
			Продолжить;
		КонецЕсли;

		Если ВРег(СокрЛП(ДанныеСтроки[0])) = "NAME" Тогда
			ПроверитьЗаполнитьПараметр(Приложение_Имя, "НеизвестнаяКонфигурация", ДанныеСтроки[1]);
		КонецЕсли;

		Если ВРег(СокрЛП(ДанныеСтроки[0])) = "DESTINATION" Тогда
			ПроверитьЗаполнитьПараметр(Приложение_Ид, "unknown", ДанныеСтроки[1]);
			Приложение_Ид = Сред(Приложение_Ид, СтрНайти(Приложение_Ид, "\") + 1);
		КонецЕсли;

		Если ВРег(СокрЛП(ДанныеСтроки[0])) = "VERSION" Тогда
			ПроверитьЗаполнитьПараметр(Приложение_Версия, "0.0.0.0", ДанныеСтроки[1]);
		КонецЕсли;
		
		ТекСтрока = Чтение.ПрочитатьСтроку();

	КонецЦикла;

	Чтение.Закрыть();

	УдалитьФайлы(КаталогДляРаспаковки);

КонецПроцедуры // ПрочитатьОписаниеШаблонаИзМанифеста()

Процедура ПроверитьЗаполнитьПараметр(Параметр, Знач ПустоеЗначение, Значение)

	Если НЕ ЗначениеЗаполнено(Параметр)
	 ИЛИ Параметр = ПустоеЗначение Тогда
		Параметр = СокрЛП(Значение);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнитьПараметр()

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытий

// Процедура - обработчик события "ПриСозданииОбъекта"
//
// Параметры:
//  Менеджер	 - МенеджерОбработкиДанных    - менеджер обработки данных - владелец
// 
// BSLLS:UnusedLocalMethod-off
Процедура ПриСозданииОбъекта(Менеджер = Неопределено)

	УстановитьМенеджерОбработкиДанных(Менеджер);

	Лог = ПараметрыПриложения.Лог();

	Приложение_Имя    = "НеизвестнаяКонфигурация";
	Приложение_Ид     = "unknown";
	Приложение_Версия = "0.0.0.0";

	Лог.Информация("[%1]: Инициализирован обработчик", ТипЗнч(ЭтотОбъект));

КонецПроцедуры // ПриСозданииОбъекта()
// BSLLS:UnusedLocalMethod-on

#КонецОбласти // ОбработчикиСобытий
